---
// Individual blog post page - dynamic route
import { getPosts, getCategories } from '../../lib/wordpress';
import BlogLayout from '../../layouts/BlogLayout.astro';
import PostHeader from '../../components/PostHeader.astro';
import SEO from '../../components/SEO.astro';

// Generate static paths for all posts at build time
export async function getStaticPaths() {
  try {
    const posts = await getPosts('per_page=100');
    
    return posts.map((post) => ({
      params: { slug: post.slug },
      props: { post }
    }));
  } catch (error) {
    console.error('Error generating static paths:', error);
    return [];
  }
}

// Get the post from props
const { post } = Astro.props;

// Fetch categories for display
let categories: any[] = [];
try {
  categories = await getCategories();
} catch (error) {
  console.error('Error fetching categories:', error);
}

// Helper function to get category name
function getCategoryName(categoryId: number) {
  const category = categories.find(cat => cat.id === categoryId);
  return category ? category.name : 'Uncategorized';
}

// Extract plain text from HTML for meta description
function getPlainText(html: string, maxLength: number = 160) {
  const text = html.replace(/<[^>]*>/g, ' ').replace(/\s+/g, ' ').trim();
  return text.length > maxLength ? text.substring(0, maxLength) + '...' : text;
}

const metaDescription = post.excerpt?.rendered ? getPlainText(post.excerpt.rendered) : getPlainText(post.content.rendered);
const categoryName = post.categories.length > 0 ? getCategoryName(post.categories[0]) : undefined;
---

<BlogLayout 
  title={post.title.rendered}
  description={metaDescription}
>
  <Fragment slot="head">
    <SEO
      title={post.title.rendered}
      description={metaDescription}
      type="article"
      publishedTime={post.date}
      modifiedTime={post.modified}
    />
  </Fragment>

  <PostHeader
    title={post.title.rendered}
    date={post.date}
    category={categoryName}
    excerpt={post.excerpt?.rendered ? getPlainText(post.excerpt.rendered, 200) : undefined}
  />

  <div class="prose prose-lg max-w-none">
    <div set:html={post.content.rendered}></div>
  </div>

  <div class="mt-12 pt-8 border-t border-gray-200">
    <a 
      href="/blog" 
      class="inline-flex items-center text-brand-600 hover:text-brand-700 font-medium transition-colors"
    >
      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
      </svg>
      Back to Blog
    </a>
  </div>
</BlogLayout>